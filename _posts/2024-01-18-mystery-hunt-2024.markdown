---
layout: post
page-type: post
title:  "MIT Mystery Hunt 2024 Postmortem"
date:   2024-01-18 15:33:00 -0800
tags: puzzle puzzle-hunt
---
So MITMH2024 just happened. We (ET Phone in Answer) escaped from the underworld and tried to get all the Pluto shards, but there were just too many cities to visit in such a short amount of time. Seems like Pluto is condemned to forever being Insignificant Space Debris. But anyway, there were some interesting puzzles in the hunt. There will be spoilers. Click to reveal them.

## Arts & Crafts

{% spoiler %}
Arts & Crafts was a fun puzzle that involved the following steps:
* Solve a nonogram that also indicates a crease pattern
* Cut the resulting pattern and fold along the creases
* Build the resulting 3D structure in Minecraft
* Figure out which combinations of levers in each structure light the glowstone
* Extract using binary

The main thing I worked on was the cut-and-fold part. There were 5 structures, and having to cut and fold all of them would take way too long. So I used Blender! All I had to do was save both the Minecraft grid and the nonogram solution as textures, instantiate an appropriately-sized grid in Blender, set up the material and UV mapping to display the Minecraft grid and nonogram solution, delete the unused squares (which conveniently appeared green), and use rotations to perform the 90° folds. The result is a *perfect 3D model of the Minecraft structure* with the following advantages:
* No tape needed to maintain strucure!
* Made a cutting mistake? Just undo it!
* To get a different structure, just replace the texture!

<img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/minecraft-structures.png' | relative_url }}"
alt="Result of 'cutting' and 'folding' the crease pattern in Blender"/>

(Afterwards, someone referenced it to build it in Minecraft.)
{% endspoiler %}

## Marathon Block Pushing Game

{% spoiler %}
Oh look, Sokoban! But it's a *huge* level, and nobody has time for that. So of course I hacked into it. But before that, I played a little of it and noticed some familiar structures: the diode, and the 1-toggle.

<div class="figrow">
    <figure>
        <img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/diode.svg' | relative_url}}"
            alt="Diode"/>
        <figcaption>A diode. Only one direction of movement is allowed.</figcaption>
    </figure>
    <figure>
        <img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/1-toggle.svg' | relative_url}}"
            alt="1-toggle"/>
        <figcaption>A 1-toggle. Like a diode, but traversing it flips the direction.</figcaption>
    </figure>
</div>

Which made some team members wonder if the writer of the puzzle knew about [the](https://arxiv.org/pdf/1806.03539.pdf) [gadget](https://arxiv.org/pdf/1812.03592.pdf) [framework](https://arxiv.org/pdf/2006.01256.pdf). (In retrospect, I think they either looked at an older Sokoban hardness paper or came up with the gadgets themselves.)

### The Block Hacking Game

Hacking leads to the source code, where we can see the full array of repeated components used in the level. So I figured out what each repeated component represents: a toggle switch.

<div class="figrow">
    <figure>
        <img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/toggle-switch.svg' | relative_url}}"
            alt="Toggle Switch"/>
        <figcaption>A toggle switch. There are 2 outputs. Every time the path is crossed, it switches what output it leads to.</figcaption>
    </figure>
</div>

Well, technically, you could take the bottom path as many times as you want because of how the repeated component was set up in the original.

<div class="figrow">
    <figure>
        <img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/input-merged-scd.svg' | relative_url}}"
            alt="Input-Merged Self-Closing Door"/>
        <figcaption>An input-merged self-closing door. Like the toggle switch, but the bottom path is always open
            and always allows opening the top path.</figcaption>
    </figure>
</div>

Well, *technically*, you could also try to cheese things by taking the top path even if it's not truly open, but this will cause the gadget to be completely intraversable later. The setup of the level ensures that the gadget is equivalent to a toggle switch, since you always want to take the top path if it's truly open. So we will go back to the toggle switch simplification. If a bunch of toggle switches are chained together in a very mean way, it can take an exponential amount of toggle switch traversals to reach the goal:

<div class="figrow">
    <figure>
        <img class="center-img" src="{{ '/assets/posts/mystery-hunt-2024-postmortem/toggle-switch-chain.svg' | relative_url}}"
            alt="Toggle Switch Chain"/>
        <figcaption>A chain of adversarily attached toggle switches. For $$n$$ toggle switches, getting to the end requires
        $$2^{n+1} - 2$$ toggle switch traversals.</figcaption>
    </figure>
</div>

The level is made up of a mean chain of 78 toggle switches. Some of the switches are already up, so it would take less toggle switch traversals than $$2^{79} - 2 \approx 6.045\times 10^{23}$$. However, the puzzle requests for the number of *moves*, not the number of toggle switch traversals. Counting them is tricky, especially because the toggle switch chain goes back and forth inside a big rectangle. Thankfully, I had experience counting moves (video game algorithmic hardness, making sure that some constraints line up), but it was still annoying. Eventually you get that it takes about $$2.211\times 10^{24}$$ moves to get to the goal. (Though you need the exact value).

But wait! There's a part 2!

## Build Sokoban

The requirement was to build a tricky but solvable Push-1 Sokoban (no pulling) that fits in a 20×20 grid and takes at least 1,000 moves to win. But there's one big twist: only one (1) push block is allowed! This was an embarrasing moment, as I struggled to find a way to make the player have to step on tiles a great number of times. I had experience with building gadgets when an arbitrary amount of state was allowed, not just one block! Thankfully, a teammate came up with a clever gadget: if you want to push a block through it, you must push it partway, go all the way to the other side of the gadget, and finish the pushing. Chaining these together is what gave the necessary complexity, with our team achieving over 2,400 moves.
{% endspoiler %}

## Turing Tar-pit

{% spoiler %}
Ooh, esoteric programming languages! Rockstar thankfully had a convenient online interpreter, but the rest we had to build. I do find it especially interesting that what was displayed was the *result* or *process* of doing the thing that the esolang was based off of (cooking, acting a play, singing rock music) with the only exception being Piet. And then there's the epigrams. The list is so funny. At the end of the puzzle, we got stuck on "EITERFACEOFF" for quite a while, even after multi-checking our work, even on Piet. Not sure what happened there. If anyone knows what an eiter is, let me know (oh wait, there's no comments section. Oh well.).
{% endspoiler %}

## Retro Chess Puzzle

{% spoiler %}
What a creative name for a puzzle. And the Chess960 twist at the end was amazing. I don't know how people construct these. Now, we did get stuck on "NINE A X" for a while. How do you NINE A X? By putting an I in front! (But that was a big red herring). During the Chess960 twist, I worked on the retro chess puzzle that I chose, and used a pink queen just because we had one. Of course, this one was parallelized a lot.
{% endspoiler %}

## Transformations

{% spoiler %}
After opening the puzzle I'm immediately greeted by nonsense strings like "NINTHILSEKIRTSMIHNISNACMIHOTTEMMNLPSDRAWOTEHTDNNORNIDNALNIAREVIR". It's one of *those* puzzles. Eventually, I figured out (using the last nonsense string) that they're the result of performing the same transformation of each word in a sentence and removing the spaces. Some teammates helped, as this puzzle required a *lot* of parallelization. Some things to note:
* Every sentence has perfect grammar. I was suspicious about our sentence for "DUGHTERLIVESAINHERMORSREGIAONDFLLSAINLOVEAWITHAOVERLORDAOFLD", until someone realized that all the articles are removed. Tricky!
* Just because `a`→`b` during the transformation does not mean that `b`→`a` to reverse it. Some `b`s were just naturally there.
* "Rest" and "respite" are synonyms. We got mildly trolled by that one, wondering what that random E turns into.

The ending got less interesting, as we solved it by looking up the story fragments instead of the intended solution clued by the canned hint.
{% endspoiler %}

## Turning Æsop's Tables; a new translation

{% spoiler %}
Seeing Aesop's fables get transformed with things like a *sudden sliced raw cabbage and mayonnaise salad* was funny. That's all. (I didn't see the puzzle to its eventual solving.)
{% endspoiler %}

## Hell, MI

{% spoiler %}
Interesting round. We originally thought that the 7-colored torus fact was irrelevant, after interpreting "goes all the way around the doughnut" as "is a loop", when that ended up not being the case. I also heard legends about that text adventure, taking classic puzzles, making them impossible, and requiring external solutions (like putting a Tower of Hanoi ring on top of a Pole (Polish person)!).
{% endspoiler %}

Welp, that's all I have for now. By the way, I have some interesting puzzle ideas for some future Mystery Hunt.
{% spoiler %}
<div class="center-text">Made you look. They're a secret!</div>
{% endspoiler %}